(def rapply (x y) (apply y x))
(def call (x y) (apply x (list y)))
(def rcall (x y) (apply y (list x)))
(def strict-apply (func argl)
     (if (= (len (head func)) (len argl))
         (apply func argl)
         (err "Argument count does not match the operand count")))
(def strict-rapply (argl func) (strict-apply func argl))
(def rest () (&process-next (apply &rest &args)))
(def &next-thing-is-gen (next-thing)
     (apply (head next-thing)
            (&rest next-thing)))
(def &process-next (next-thing)
     (if (gen? (head next-thing))
         (&next-thing-is-gen (head next-thing))
         next-thing))
(def seq (starting finishing) 
     (if (< starting finishing)
         (list starting (gen seq (+ 1 starting) finishing))
         (list finishing)))
(def map (stencil lst)
    (list (stencil (head lst))
          (gen map stencil (rest lst))))
(def &actually-show (things) 
     (print (head things))
     (show (rest things)))
(def show (things)
     (if (not (head things)) 
         nil
         (&actually-show things)))
(def nth (num lst)
     (if (> num 0)
         (nth (- num 1) (rest lst))
         (head lst)))
(def take (num lst)
     (if (> num 0)
         (cons (head lst) (take (- num 1) (rest lst)))
         nil))
(def repeat (expr)
     (list expr
           (gen repeat expr)))
(def filt (predicate sequence) 
     (if (> (len sequence) 0)
         (if (predicate (head sequence))
             (cons (head sequence) (filt predicate (rest sequence)))
             (filt predicate (rest sequence))  )) )
